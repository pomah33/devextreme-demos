name: Visual Tests (Frameworks)

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 */2 * * 6,0'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build DevExtreme
    timeout-minutes: 20
    
    steps:

    #Git
    - name: Get sources
      uses: actions/checkout@v2   

    - name: Clone devextreme repo from PR author fork
      continue-on-error: true
      if: github.event_name == 'pull_request'
      run: git clone -b ${{github.event.pull_request.head.ref}} https://github.com/${{github.event.pull_request.user.login}}/devextreme ../devextreme-repo

    - name: Clone devextreme repo
      run: |
        BASE_BRANCH=$(node -p -e "require('./package.json').version.slice(0, 4).replace('.', '_')")
        test -d ../devextreme-repo || git clone -b $BASE_BRANCH https://github.com/devexpress/devextreme ../devextreme-repo

    - name: Clone devextreme-angular repo
      run: |
        git clone https://github.com/devexpress/devextreme-angular ../devextreme-angular

    - name: Clone devextreme-react repo
      run: |
        git clone https://github.com/devexpress/devextreme-react ../devextreme-react

    - name: Clone devextreme-vue repo
      run: |
        git clone https://github.com/devexpress/devextreme-vue ../devextreme-vue

    #Build Devextreme
    - name: DevExtreme - Generate package-lock
      run: |
        cd ../devextreme-repo
        test -f package-lock.json || npm i --package-lock-only

    - name: DevExtreme - Install packages
      run: |
        cd ../devextreme-repo
        npm ci --no-audit --no-fund

    - name: DevExtreme - Build
      run: |
        cd ../devextreme-repo
        npm run build-dist

    #Build Devextreme-react
    - name: Devextreme-React - Install devextreme package
      run: |
        cd ../devextreme-react/packages/devextreme-react
        npm install --save-dev ../../../devextreme-repo/artifacts/npm/devextreme

    - name: Devextreme-React - Run npm install
      run: |
        cd ../devextreme-react
        npm ci --no-audit --no-fund

    - run: |
        cd ../devextreme-react
        npm run bootstrap

    - name: Devextreme-React - Build
      run: |
        cd ../devextreme-react
        npm run pack
    
    - name: Devextreme-React - Pack
      run: |
        cd ../devextreme-react/packages/devextreme-react
        npm run pack

    #Build Devextreme-angular
    # - name: Devextreme-Angular - Install devextreme package
    #   run: |
    #     cd ../devextreme-angular/packages/devextreme-angular
    #     npm install --save-dev ../../../devextreme-repo/artifacts/npm/devextreme

    # - name: Devextreme-Angular - Run npm install
    #   run: |
    #     cd ../devextreme-angular
    #     npm install --no-audit --no-fund

    # - run: |
    #     cd ../devextreme-angular
    #     npm run bootstrap

    # - name: Devextreme-Angular - Build
    #   run: |
    #     cd ../devextreme-angular
    #     npm run pack

    # - name: Devextreme-Angular - Pack
    #   run: |
    #     cd ../devextreme-angular/packages/devextreme-angular
    #     npm pack

    #Build Devextreme-vue
    # - name: Devextreme-Vue - Install devextreme package
    #   run: |
    #     cd ../devextreme-vue/packages/devextreme-vue
    #     npm install --save-dev ../../../devextreme-repo/artifacts/npm/devextreme

    # - name: Devextreme-Vue - Run npm install
    #   run: |
    #     cd ../devextreme-vue
    #     npm ci --no-audit --no-fund

    # - run: |
    #     cd ../devextreme-vue
    #     npm run bootstrap

    # - name: Devextreme-Vue - Build
    #   run: |
    #     cd ../devextreme-vue
    #     npm run pack

    # - name: Devextreme-Vue - Pack
    #   run: |
    #     cd ../devextreme-vue/packages/devextreme-vue
    #     npm run pack

    #Build Demos
    - name: Demos - Generate package-lock
      run: |
        test -f package-lock.json || npm i --package-lock-only

    - name: Demos - Restore npm cache
      uses: actions/cache@v2
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node

    - name: Demos - Install packages
      run: |
        test -d node_modules || npm ci --no-audit --no-fund

    - name: Demos - Install devextreme package
      run: |
        rm -rf ./node_modules/devextreme
        npm install --no-package-lock $(find ../devextreme-repo/artifacts/npm/devextreme/ -maxdepth 1 -name "devextreme-*.tgz")

    - name: Demos - Install devextreme-react package
      run: |
        rm -rf ./node_modules/devextreme-react
        npm install --no-package-lock $(find ../devextreme-react/ -name "devextreme-react*.tgz")

    # - name: Demos - Install devextreme-vue package
    #   run: |
    #     rm -rf ./node_modules/devextreme-vue
    #     npm install --no-package-lock $(find ../devextreme-vue/ -name "devextreme-vue*.tgz")

    # - name: Demos - Install devextreme-angular package
    #   run: |
    #     rm -rf ./node_modules/devextreme-angular
    #     npm install --no-package-lock $(find ../devextreme-angular/ -maxdepth 1 -name "devextreme-angular*.tgz")

    - name: Demos - Prepare bundles
      run: npm run prepare-bundles

    #Publish artifacts
    - name: Zip node_modules    
      run: 7z a -t7z -mx3 -mmt2 node_modules.7z node_modules

    - name: Copy build artifacts      
      uses: actions/upload-artifact@v2
      with:
        name: devextreme-sources        
        path: |
          node_modules.7z
          bundles/
        retention-days: 1

    #Teardown
    - name: Cleanup devextreme package
      run: rm -rf ./node_modules/devextreme
    
  testcafe:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        CONSTEL: [react(1/4), react(2/4), react(3/4), react(4/4), vue(1/4), vue(2/4), vue(3/4), vue(4/4), angular(1/4), angular(2/4), angular(3/4), angular(4/4)]

    runs-on: ubuntu-latest
    name: ${{ matrix.CONSTEL }}
    timeout-minutes: 60

    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Download devextreme sources
      uses: actions/download-artifact@v2
      with:
        name: devextreme-sources

    - name: Unpack artifacts
      run: 7z x node_modules.7z

    - name: Prepare JS
      run: npm run prepare-js
    
    - name: Prepare Bundles
      run: npx gulp bundles

    - name: Run Web Server
      run: |
        python -m http.server 8080 &
        python -m http.server 8081 &
        python -m http.server 8082 &
        python -m http.server 8083 &

    - name: Run TestCafe tests
      env:
        BROWSERS: chrome:headless
        #DEBUG: hammerhead:*,testcafe:*
        CONCURRENCY: 4
        TCQUARANTINE: true
        CONSTEL: ${{ matrix.CONSTEL }}
      run: npm run test-testcafe

    - name: Get screenshots artifacts name
      if: ${{ failure() }}
      id: screenshotname
      run: echo ::set-output name=value::$(echo "${{ matrix.CONSTEL }}" | grep -oP "^\w+")

    - name: Copy screenshots artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: screenshots-${{ steps.screenshotname.outputs.value }}
        path: ${{ github.workspace }}/testing/artifacts/*
        if-no-files-found: ignore

  cleanup:
    needs: testcafe
    runs-on: ubuntu-latest
    name: Cleanup artifacts
    timeout-minutes: 10
    steps:
    - name: Prepare delete artifact
      run: touch devextreme-repo-artifacts.tar

    - name: Cleanup artifact      
      uses: actions/upload-artifact@v2
      with:
        name: devextreme-sources
        path: devextreme-repo-artifacts.tar
        retention-days: 1
